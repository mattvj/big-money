{"version":3,"sources":["../../specs/testSpec.js"],"names":["describe","beforeEach","set","it","expect","toString","toEqual","value","toCurrencyString","toMatch","parse","addCurrency","multiply","divide","toMinimalString"],"mappings":";;AAAA;;;;AACA;;;;;;AAEAA,SAAS,UAAT,EAAqB,YAAM;AACzBC,aAAW,YAAM;AACf,uBAASC,GAAT,CAAa,aAAb;AACD,GAFD;;AAIAC,KAAG,gCAAH,EAAqC,YAAM;AACzCC,WAAO,uBAAa,EAAb,EAAiB,KAAjB,EAAwBC,QAAxB,EAAP,EAA2CC,OAA3C,CAAmD,MAAnD;AACD,GAFD;;AAIAH,KAAG,6BAAH,EAAkC,YAAM;AACpC,QAAMI,QAAQ,uBAAa,EAAb,EAAiB;AAC7B,gBAAU,IADmB;AAE7B,cAAQ,YAFqB;AAG7B,uBAAiB,GAHY;AAI7B,wBAAkB,CAJW;AAK7B,kBAAY,CALiB;AAM7B,cAAQ,KANqB;AAO7B,qBAAe;AAPc,KAAjB,EAQXC,gBARW,EAAd;;AAUFJ,WAAOG,KAAP,EAAcE,OAAd,CAAsB,YAAtB;AACD,GAZD;;AAcAN,KAAG,sBAAH,EAA2B,YAAM;AAC/BC,WAAO,mBAASM,KAAT,CAAe,WAAf,EAA4BL,QAA5B,EAAP,EAA+CC,OAA/C,CAAuD,MAAvD;AACD,GAFD;;AAIAH,KAAG,sBAAH,EAA2B,YAAM;AAC/BC,WAAO,mBAASM,KAAT,CAAe,WAAf,EAA4BL,QAA5B,EAAP,EAA+CC,OAA/C,CAAuD,MAAvD;AACD,GAFD;;AAIAH,KAAG,uBAAH,EAA4B,YAAM;AAChC,uBAASQ,WAAT,CAAqB;AACnB,gBAAU,IADS;AAEnB,cAAQ,YAFW;AAGnB,uBAAiB,GAHE;AAInB,wBAAkB,CAJC;AAKnB,kBAAY,CALO;AAMnB,cAAQ,KANW;AAOnB,qBAAe;AAPI,KAArB;;AAUAP,WAAO,mBAASM,KAAT,CAAe,aAAf,EAA8BF,gBAA9B,EAAP,EAAyDF,OAAzD,CAAiE,WAAjE;AACD,GAZD;;AAcAH,KAAG,gBAAH,EAAqB,YAAM;AACzBC,WAAO,mBAASM,KAAT,CAAe,WAAf,EAA4BE,QAA5B,CAAqC,EAArC,EAAyCJ,gBAAzC,EAAP,EAAoEF,OAApE,CAA4E,YAA5E;AACD,GAFD;;AAIAH,KAAG,UAAH,EAAe,YAAM;AACnBC,WAAO,mBAASM,KAAT,CAAe,WAAf,EAA4BG,MAA5B,CAAmC,UAAnC,EAA+CL,gBAA/C,EAAP,EAA0EF,OAA1E,CAAkF,UAAlF;AACD,GAFD;;AAIAH,KAAG,gBAAH,EAAqB,YAAM;AACzBC,WAAO,mBAASM,KAAT,CAAe,UAAf,EAA2BI,eAA3B,EAAP,EAAqDR,OAArD,CAA6D,GAA7D;AACD,GAFD;AAGD,CAxDD","file":"testSpec.js","sourcesContent":["import MockDate from 'mockdate';\nimport BigMoney from '../src/bigmoney';\n\ndescribe('BigMoney', () => {\n  beforeEach(() => {\n    MockDate.set(1434319925275);\n  });\n\n  it('Should show USD money 50 cents', () => {\n    expect(new BigMoney(50, 'USD').toString()).toEqual(\"0.50\");\n  });\n\n  it('Should show custom currency', () => {\n      const value = new BigMoney(50, {\n        \"symbol\": \"RR\",\n        \"name\": \"RAD Dollar\",\n        \"symbol_native\": \"$\",\n        \"decimal_digits\": 4,\n        \"rounding\": 0,\n        \"code\": \"RAD\",\n        \"name_plural\": \"RAD dollars\"\n      }).toCurrencyString();\n\n    expect(value).toMatch(\"0.0050 RAD\");\n  });\n\n  it('Half even rounding 1', () => {\n    expect(BigMoney.parse(\"3.943 USD\").toString()).toEqual(\"3.94\");\n  });\n\n  it('Half even rounding 2', () => {\n    expect(BigMoney.parse(\"3.947 USD\").toString()).toEqual(\"3.95\");\n  });\n\n  it('New customer currency', () => {\n    BigMoney.addCurrency({\n      \"symbol\": \"MM\",\n      \"name\": \"MMM Dollar\",\n      \"symbol_native\": \"$\",\n      \"decimal_digits\": 3,\n      \"rounding\": 0,\n      \"code\": \"MMM\",\n      \"name_plural\": \"MMM dollars\"\n    });\n\n    expect(BigMoney.parse(\"3.94557 MMM\").toCurrencyString()).toEqual(\"3.946 MMM\");\n  });\n\n  it('Multiplication', () => {\n    expect(BigMoney.parse(\"4.063 USD\").multiply(30).toCurrencyString()).toEqual(\"121.80 USD\");\n  });\n\n  it('Division', () => {\n    expect(BigMoney.parse(\"4.063 USD\").divide(\"1.23 USD\").toCurrencyString()).toEqual(\"3.30 USD\");\n  });\n\n  it('Minimal String', () => {\n    expect(BigMoney.parse(\"4.00 USD\").toMinimalString()).toEqual(\"4\");\n  });\n});\n"]}